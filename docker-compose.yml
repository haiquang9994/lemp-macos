services:
  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - webnet

  php74:
    container_name: php74
    image: haiquang9994/php:7.4-fpm
    volumes:
      - /Users/light/Developer/www:/Users/light/Developer/www
    networks:
      - webnet
    depends_on:
      - redis
      - mysql
      - mongodb

  nginx:
    container_name: nginx
    build:
      context: "./nginx"
    volumes:
      - /Users/light/Developer/vhosts:/etc/nginx/conf.d
      - /Users/light/Developer/www:/Users/light/Developer/www
    ports:
      - "80:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      - php74
    networks:
      - webnet

  mysql:
    container_name: mysql
    image: haiquang9994/mysql:5.7
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./.my.cnf:/root/.my.cnf
    networks:
      - webnet

  # mongodb:
  #   container_name: mongodb
  #   image: mongo:latest
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - ./mongodb/data:/data/db
  #     - ./mongo.keyfile:/etc/mongo/keyfile
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: 12345678
  #     MONGO_REPLICA_SET_NAME: rs0
  #   command:
  #     ["--replSet", "rs0", "--keyFile", "/etc/mongo/keyfile", "--bind_ip_all"]
  #   networks:
  #     - mongodb_network
    # mongosh "mongodb://root:12345678@127.0.0.1:27017"
    # mongosh "mongodb://educrm:4233B8A2jS4WtA27@127.0.0.1:27017"
    # mongosh "mongodb://root:WM646E4Fax3G33S5@127.0.0.1:27017/?authSource=admin&replicaSet=rs0"
    # rs.initiate({ _id: "rs0", members: [ { _id: 0, host: "mongodb:27017" } ]})
  mongodb:
    image: mongo:5
    container_name: mongodb
    command: ["--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - ./data/mongodb:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongodb:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 30s
    restart: always
    networks:
      - webnet

networks:
  webnet:
    driver: bridge
